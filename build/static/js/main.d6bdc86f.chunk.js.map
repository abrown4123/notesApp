{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","remove","label","important","content","onClick","Notification","message","className","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6bdc86f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({note, toggleImportance, remove}) => {\r\n  const label = note.important \r\n    ? \"make not important\" : \"make important\"\r\n\r\n  return (\r\n\t\t<li>\r\n\t\t\t{note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n\t\t\t<button onClick={remove}>delete</button>\r\n\t\t</li>\r\n\t) \r\n}\r\nexport default Note","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification;","import axios from 'axios';\r\nconst baseUrl = \"https://shielded-shore-35890.herokuapp.com/api/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from \"react\";\n// import axios from 'axios';\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const hook = () => {\n    console.log('effect')\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n\n  useEffect(hook, []);\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = {...note, important: !note.important};\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote =>{\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note ${note.content} was already removed from the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      })\n  }\n\n  const removeNote = id => {\n    noteService\n      .remove(id)\n      .then(response => {\n        console.log(response, \"has been deleted\")\n        setNotes(notes.filter(note => note.id !== id))\n      })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('');\n      })\n  }\n\n  const handleNewNote = (event) => {\n    setNewNote(event.target.value);\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={()=>setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ol>\n        {notesToShow.map(note =>\n          <Note \n            key={note.id} \n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n            remove={() => removeNote(note.id)} \n          />\n        )}\n      </ol>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNewNote}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}